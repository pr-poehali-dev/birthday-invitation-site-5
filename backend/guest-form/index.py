import json
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Dict, Any


def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –≥–æ—Å—Ç—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email
    Args: event —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã (name, attendance), context —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    Returns: JSON –æ—Ç–≤–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    '''
    method = event.get('httpMethod', 'GET')
    
    # CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    cors_headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
        'Access-Control-Max-Age': '86400'
    }
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': cors_headers,
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {**cors_headers, 'Content-Type': 'application/json'},
            'body': json.dumps({'error': '–¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'})
        }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        body_data = json.loads(event.get('body', '{}'))
        guest_name = body_data.get('name', '').strip()
        attendance = body_data.get('attendance', '')
        
        if not guest_name or not attendance:
            return {
                'statusCode': 400,
                'headers': {**cors_headers, 'Content-Type': 'application/json'},
                'body': json.dumps({'error': '–ò–º—è –∏ –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'})
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
        email_config_str = os.environ.get('EMAIL_SERVICE_CONFIG')
        if not email_config_str:
            return {
                'statusCode': 500,
                'headers': {**cors_headers, 'Content-Type': 'application/json'},
                'body': json.dumps({'error': 'Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
            }
        
        email_config = json.loads(email_config_str)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        attendance_text = "–ë—É–¥—É —Å —Ä–∞–¥–æ—Å—Ç—å—é! üéâ" if attendance == "yes" else "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç üò¢"
        current_time = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        
        email_body = f"""
        –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:

        üë§ –ò–º—è –≥–æ—Å—Ç—è: {guest_name}
        üìÖ –û—Ç–≤–µ—Ç: {attendance_text}
        üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {current_time}

        ---
        –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –ü—Ä–∏–Ω—Ü–µ—Å—Å—ã –ó–ª–∞—Ç—ã
        10 –æ–∫—Ç—è–±—Ä—è 2025 –≤ 17:00
        –†–µ—Å—Ç–æ—Ä–∞–Ω ¬´–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –æ—á–∞–≥¬ª, –∑–∞–ª –≤–µ—Ä–∞–Ω–¥–∞
        –ü–æ–¥—É—à–∫–∏–Ω—Å–∫–æ–µ —à., 9, –û–¥–∏–Ω—Ü–æ–≤–æ
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        msg = MIMEMultipart()
        msg['From'] = email_config['user']
        msg['To'] = email_config['to'] 
        msg['Subject'] = f"üìù –ê–Ω–∫–µ—Ç–∞ –≥–æ—Å—Ç—è: {guest_name}"
        
        msg.attach(MIMEText(email_body, 'plain', 'utf-8'))
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
        server = smtplib.SMTP(email_config['service'], 587)
        server.starttls()
        server.login(email_config['user'], email_config['pass'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        server.sendmail(email_config['user'], email_config['to'], msg.as_string())
        server.quit()
        
        return {
            'statusCode': 200,
            'headers': {**cors_headers, 'Content-Type': 'application/json'},
            'body': json.dumps({
                'success': True,
                'message': f'–°–ø–∞—Å–∏–±–æ, {guest_name}! –í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.'
            })
        }
        
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {**cors_headers, 'Content-Type': 'application/json'},
            'body': json.dumps({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {**cors_headers, 'Content-Type': 'application/json'},
            'body': json.dumps({'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'})
        }